@page "/registroClientes"
@page "/registroClientes/{ClienteId:int}"

@inject NotificationService notificationService
@inject HttpClient httpClient

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container-sm">
        <div class="card w-75 mx-auto">
            <div class ="card-header">
                <head>
                    <h1>Registro de Clientes</h1>
                </head>
            </div>

            <div class ="card-body">
                    <label>Id Cliente</label>
                    <div class="col-2">
                        <div class="input-group mb-3">
                            <InputNumber class="form-control" @bind-Value="cliente.ClienteId" aria-describedby="BotonBuscarId"></InputNumber>
                            <button class="btn btn-outline-primary" @onclick="Buscar"><i class="oi oi-magnifying-glass"></i></button>
                        </div>
                    </div>

                            <div class ="col-4">
                                <label>Nombre</label>
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="cliente.Nombre" aria-describedby="NombreCliente"></InputText>
                                    <ValidationMessage For="@(() => cliente.Nombre)"></ValidationMessage>
                                </div>
                            </div>

                        <div class="row">
                            <div class="col-4">
                                <label>Tel&eacute;fono</label>
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="cliente.Telefono" aria-describedby="TelefonoCliente"></InputText>
                                    <ValidationMessage For="@(() => cliente.Telefono)"></ValidationMessage>
                                </div>
                            </div>

                            <div class="col-4">
                                <label>Celular</label>
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="cliente.Celular" aria-describedby="CelularCliente"></InputText>
                                    <ValidationMessage For="@(() => cliente.Celular)"></ValidationMessage>
                                </div>
                            </div>
                        </div>

                            <div class="col-4">
                                <label>Rnc</label>
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="cliente.Rnc" aria-describedby="RncCliente"></InputText>
                                    <ValidationMessage For="@(() => cliente.Rnc)"></ValidationMessage>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-4">
                                    <label>Email</label>
                                    <div class="input-group mb-3">
                                        <InputText class="form-control" @bind-Value="cliente.Email" aria-describedby="EmailCliente"></InputText>
                                        <ValidationMessage For="@(() => cliente.Email)"></ValidationMessage>
                                    </div>
                                </div>

                                <div class="col">
                                    <label>Direcci&oacute;n</label>
                                    <div class="input-group mb-3">
                                        <InputText class="form-control" @bind-Value="cliente.Direccion" aria-describedby="DireccionCliente"></InputText>
                                        <ValidationMessage For="@(() => cliente.Direccion)"></ValidationMessage>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><i class="oi oi-file">Nuevo</i></button>
                                    <button type ="submit" class="btn btn-outline-success"><i class="oi oi-document">Guardar</i></button>
                                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="oi oi-trash">Eliminar</i></button>
                                </div>
                            </div>

                        </div>

            </div>
        </div>
</EditForm>


@code
{

    [Parameter]
    public int ClienteId {get; set;}

    public Clientes cliente {get; set;} = new Clientes();

    public NotificationMessage Mensaje {get; set;} = new NotificationMessage();


    protected override async Task OnInitializedAsync()
    {
        if(ClienteId > 0)
        {
            cliente.ClienteId = ClienteId;
            await Buscar();
        }
        StateHasChanged();
    }

    public async Task Buscar()
    {
        var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{cliente.ClienteId}");
        
        if(clienteEncontrado != null)
        {
            cliente = clienteEncontrado;
            StateHasChanged();
        }
        else
        {
            //Mensaje de error al encontrar
        }
    }

    public void Nuevo()
    {
        cliente = new Clientes();    
    }

    public async Task Guardar()
    {
        if(ValidarCasillasVacias())
        {
           Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error: Casilla/s vacia/s",
                Detail = "Una o varias casillas se encuentran vacias",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
            return;
        }

        if(Validar())
        {
            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error: El ID es menor a 0",
                Detail = "Verifique si ha colocado el ID menor a 0",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
            return;
        }

        using var response = await httpClient.PostAsJsonAsync("api/Clientes", cliente);
        
        if(!response.IsSuccessStatusCode)
        {
            if(response.StatusCode == HttpStatusCode.BadRequest)
            {
                Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error: Dato ya existente",
                    Detail = "El dato insertado ya existe",
                    Duration = 5_000
                };
                notificationService.Notify(Mensaje);
                return;
            }
        }

        var clienteDevuelto = await response.Content.ReadFromJsonAsync<Clientes>();

        if(clienteDevuelto is not null)
        {
            cliente = clienteDevuelto;

            StateHasChanged();
            Nuevo();

            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Success,
                Summary = "Exito al guardar",
                Detail = "Ha guardado con exito al cliente",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
        }
    }

    public async Task Eliminar()
    {
        if(ValidarCasillasVacias())
        {
            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error: No hay datos",
                Detail = "Hay una o varias casillas obligatorias vacias",
                Duration = 4_000
            };
        notificationService.Notify(Mensaje);
            return;
        }

        using var response = await httpClient.DeleteAsync($"api/Clientes/{cliente.ClienteId}");

        if(!response.IsSuccessStatusCode)
        {
            return;
        }

        else
        {
            Nuevo();
            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Cliente Eliminado",
                Detail = "Se ha eliminado correctamente el cliente",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
        }
    }

    public bool ValidarCasillasVacias()
    {
        return string.IsNullOrEmpty(cliente.Nombre) ||
                string.IsNullOrEmpty(cliente.Telefono) ||
                string.IsNullOrEmpty(cliente.Celular) ||
                string.IsNullOrEmpty(cliente.Rnc) ||
                string.IsNullOrEmpty(cliente.Email) ||
                string.IsNullOrEmpty(cliente.Direccion);
    }

    public bool Validar()
    {
        return cliente.ClienteId < 0;
    }
}